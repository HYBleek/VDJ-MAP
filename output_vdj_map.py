# -*- coding: utf-8 -*-
"""Output_VDJ_map.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nG8sU1fS3mOiusngXw2pfBhfZWa3lvCP
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter

def read_fasta(filename: str) -> dict:
    """
    Reads a FASTA file and returns a dictionary mapping sequence IDs to sequences.

    Parameters:
        filename: Path to the FASTA file.

    Returns:
        Dictionary with sequence IDs as keys and sequences as values.
    """
    sequences = {}
    with open(filename, "r") as file:
        seq_id = None
        seq_parts = []
        for line in file:
            line = line.strip()
            if line.startswith(">"):
                if seq_id is not None:
                    sequences[seq_id] = "".join(seq_parts)
                seq_id = line[1:]
                seq_parts = []
            else:
                seq_parts.append(line)
        if seq_id is not None:
            sequences[seq_id] = "".join(seq_parts)
    return sequences

def get_kmers(seq: str, k: int) -> list:
    """
    Extracts all k-mers of length k from the given sequence.

    Parameters:
        seq: The DNA sequence.
        k: The length of each k-mer.

    Returns:
        A list of k-mer strings.
    """
    return [seq[i:i+k] for i in range(len(seq) - k + 1)]

def plot_gene_kmers(embedding_csv: str, gene_file: str, k: int = 8, size_scale: float = 1000):
    """
    Reads the embedding table CSV and a FASTA file with gene segments,
    extracts k-mers from each gene, and plots them on the embedding space.

    The background shows all k-mers in the embedding table (in light gray).
    For each k-mer present in the gene segments (if it exists in the embedding table):
      - The point's color represents the frequency count in the gene.
      - The point's size is determined by the density of that k-mer among all gene k-mers.

    Parameters:
        embedding_csv: Path to the embedding_table.csv file.
        gene_file: Path to the FASTA file containing gene segments.
        k: Length of the k-mer (default is 8).
        size_scale: Scaling factor to adjust point size from density values.
    """
    # Read the embedding table CSV file.
    embedding_df = pd.read_csv(embedding_csv)

    # Precompute a lookup dictionary mapping each k-mer to its (dim1, dim2, tfidf) tuple.
    embedding_lookup = {
        row['kmer']: (float(row['dim1']), float(row['dim2']), float(row['tfidf']))
        for _, row in embedding_df.iterrows()
    }

    # Read gene segments from the FASTA file.
    gene_dict = read_fasta(gene_file)

    # Count the total number of gene k-mers.
    global_total = 0
    for seq in gene_dict.values():
        global_total += len(get_kmers(seq, k))

    # Prepare lists for plotting data.
    x_coords, y_coords, densities, freq_counts = [], [], [], []

    # Process each gene segment.
    for gene_id, seq in gene_dict.items():
        kmers = get_kmers(seq, k)
        counts = Counter(kmers)
        # For each k-mer found, use the lookup dictionary for fast access.
        for kmer, count in counts.items():
            if kmer in embedding_lookup:
                dim1, dim2, _ = embedding_lookup[kmer]
                # Count density.
                density = count / global_total
                x_coords.append(dim1)
                y_coords.append(dim2)
                densities.append(density)
                freq_counts.append(count)

    # Create the plot.
    plt.figure(figsize=(10, 8))

    # Plot all k-mers from the embedding table as background (in light gray).
    plt.scatter(embedding_df['dim1'], embedding_df['dim2'], c='lightgray', s=20,
                label='All k-mers (background)')

    # Plot gene segment k-mers:
    #  - Point size is determined by density (scaled by size_scale).
    #  - Color represents frequency count.
    sc = plt.scatter(x_coords, y_coords,
                     c=np.array(freq_counts),
                     s=np.array(densities) * size_scale,
                     cmap='viridis', alpha=0.8,
                     label='Gene k-mers')

    plt.xlabel('Dimension 1')
    plt.ylabel('Dimension 2')
    plt.title('Distribution of Gene k-mers in the Embedding Space')
    plt.colorbar(sc, label='k-mer Frequency in Gene')
    plt.legend()
    plt.show()

def compute_kmer_statistics(embedding_csv: str, all_kers_csv: str, gene_file: str, k: int = 8):
    """
    Computes k-mer statistics by comparing k-mers from gene segments, all_kers, and the embedding table.

    It calculates:
    - The number of gene k-mers that are NOT present in all_kers.csv.
    - The number of k-mers in all_kers.csv that are NOT in embedding_table.csv.
    - The ratio of k-mers from all_kers.csv that appear in embedding_table.csv.

    Parameters:
        embedding_csv: Path to the embedding_table.csv file.
        all_kers_csv: Path to the all_kers.csv file (should include a 'kmer' column).
        gene_file: Path to the FASTA file containing gene segments.
        k: Length of the k-mer (default is 8).
    """
    # Load the embedding table and get the set of its k-mers.
    embedding_df = pd.read_csv(embedding_csv)
    embedding_kmers = set(embedding_df['kmer'])

    # Load all_kers.csv.
    all_kers_df = pd.read_csv(all_kers_csv)
    all_kmers = set(all_kers_df['kmer'])

    # Read gene segments and extract k-mers.
    gene_dict = read_fasta(gene_file)
    gene_kmers = set()
    for seq in gene_dict.values():
        gene_kmers.update(get_kmers(seq, k))

    # Compute statistics.
    missing_in_all = gene_kmers - all_kmers  # Gene k-mers not in all_kers.csv.
    missing_in_embedding = all_kmers - embedding_kmers  # K-mers in all_kers.csv but not in embedding_table.csv.
    common_in_embedding = all_kmers & embedding_kmers
    ratio_in_embedding = len(common_in_embedding) / len(all_kmers) if len(all_kmers) > 0 else 0

    print("=== k-mer Statistics ===")
    print("Total number of unique gene k-mers:", len(gene_kmers))
    print("Total number of k-mers in all_kers.csv:", len(all_kmers))
    print("Number of gene k-mers NOT in all_kers.csv:", len(missing_in_all))
    print("Number of k-mers in all_kers.csv NOT in embedding_table.csv:", len(missing_in_embedding))
    print("Ratio of k-mers from all_kers.csv that appear in embedding_table.csv: {:.2f}".format(ratio_in_embedding))

if __name__ == "__main__":
    # Update the file paths as needed.
    embedding_csv = "embedding_table.csv"
    gene_file = input("The name of your file")
    all_kmers_csv = "all_kmers.csv"
    k = 8
    size_scale = 1e6

    # Plot gene k-mers in the embedding space.
    plot_gene_kmers(embedding_csv, gene_file, k, size_scale)

    # Compute and print the k-mer statistics.
    compute_kmer_statistics(embedding_csv, all_kmers_csv, gene_file, k)

len()
